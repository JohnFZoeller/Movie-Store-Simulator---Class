// ------------------------------------------------ comedy.cpp --------------------------------------------------
// John Zoeller, CSS 343 A
// Creation Date: 3/6/16
// Date of Last Modification: 3/1416
// -------------------------------------------------------------------------------------------------------------------- 
// Purpose - Implementation file for comedy.h
// -------------------------------------------------------------------------------------------------------------------- 
// Notes on specifications, special algorithms, and assumptions
// --------------------------------------------------------------------------------------------------------------------
#include "comedy.h"

// ------------------------------------constructor----------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
Comedy::Comedy() { }

// -----------------------------------destructor---------------------------------------------- 
// 
// -------------------------------------------------------------------------------------------------------------
Comedy::~Comedy() { }

// ------------------------------------makeFromStream---------------------------------------------- 
// Description: makes a comedy nodeData 
// -------------------------------------------------------------------------------------------------------------
NodeData* Comedy::makeFromStream(istream& in)
{
    int stock;
    string director, title, year;

    in.get();
    in.get();
    in >> stock;
    in.get();
    in.get();
    getline(in, director, ',');
    in.get();
    getline(in, title, ',');
    in.get();
    getline(in, year, '\n');

    year.erase(4);

    NodeData* john = new NodeData(title + " " + year, stock);

    return john;
}

// ------------------------------------equality----------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator==(const Comedy& rhs) const
{
    return ((getTitle() == rhs.getTitle()) && (getYear() == rhs.getYear()));
}

// ------------------------------------inequality---------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator!=(const Comedy& rhs) const
{
    return !(*this == rhs);
}

// ------------------------------------greater than ---------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator>(const Comedy& rhs) const
{
    if(getTitle() != rhs.getTitle())
        return (getTitle() > rhs.getTitle());
    return (getYear() > rhs.getYear());
}

// ------------------------------------less than----------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator<(const Comedy& rhs) const
{
    if(getTitle() != rhs.getTitle())
        return (getTitle() < rhs.getTitle());
    return (getYear() < rhs.getYear());
}

// ------------------------------------greaterorequal--------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator<=(const Comedy& rhs) const
{
    return ((*this < rhs) || (*this == rhs));
}

// ------------------------------------lessorequal----------------------------------------------- 
// -------------------------------------------------------------------------------------------------------------
bool Comedy::operator>=(const Comedy& rhs) const
{
    return ((*this > rhs) || (*this == rhs));
}
   
